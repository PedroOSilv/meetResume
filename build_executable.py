#!/usr/bin/env python3
"""
Script para criar execut√°vel da aplica√ß√£o AudioAI Desktop
Usa PyInstaller para gerar um app bundle para macOS
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def main():
    print("üöÄ Iniciando build do execut√°vel AudioAI...")
    
    # Diret√≥rio base do projeto
    project_dir = Path(__file__).parent
    client_dir = project_dir / "client"
    dist_dir = project_dir / "dist"
    build_dir = project_dir / "build"
    
    # Limpar builds anteriores
    if dist_dir.exists():
        print("üßπ Removendo build anterior...")
        shutil.rmtree(dist_dir)
    
    if build_dir.exists():
        shutil.rmtree(build_dir)
    
    # Verificar se o ambiente virtual est√° ativo
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ùå Erro: Execute este script dentro do ambiente virtual!")
        print("üí° Use: source audioai_client_env/bin/activate")
        sys.exit(1)
    
    # Verificar se PyInstaller est√° instalado
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller encontrado: {PyInstaller.__version__}")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado. Instalando...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
    
    # Configura√ß√µes do PyInstaller
    main_script = client_dir / "main.py"
    app_name = "AudioAI"
    
    # Comando PyInstaller
    cmd = [
        "pyinstaller",
        "--name", app_name,
        "--windowed",  # N√£o mostrar console
        "--onedir",    # Criar diret√≥rio com depend√™ncias
        "--clean",     # Limpar cache
        "--noconfirm", # N√£o pedir confirma√ß√£o
        "--add-data", f"{client_dir}:client",  # Incluir arquivos do cliente
        "--hidden-import", "PySide6.QtCore",
        "--hidden-import", "PySide6.QtWidgets", 
        "--hidden-import", "PySide6.QtGui",
        "--hidden-import", "sounddevice",
        "--hidden-import", "scipy",
        "--hidden-import", "numpy",
        "--hidden-import", "requests",
        "--hidden-import", "pydub",
        "--collect-all", "PySide6",
        str(main_script)
    ]
    
    print("üî® Executando PyInstaller...")
    print(f"üìÅ Diret√≥rio de trabalho: {project_dir}")
    
    # Executar PyInstaller
    result = subprocess.run(cmd, cwd=project_dir, capture_output=True, text=True)
    
    if result.returncode != 0:
        print("‚ùå Erro durante o build:")
        print(result.stderr)
        sys.exit(1)
    
    print("‚úÖ Build conclu√≠do com sucesso!")
    
    # Verificar se o execut√°vel foi criado
    app_path = dist_dir / app_name / f"{app_name}"
    if app_path.exists():
        print(f"üì¶ Execut√°vel criado: {app_path}")
        
        # Tornar execut√°vel
        os.chmod(app_path, 0o755)
        print("üîê Permiss√µes de execu√ß√£o configuradas")
        
        # Criar script de lan√ßamento
        create_launcher_script(project_dir, app_name)
        
    else:
        print("‚ùå Execut√°vel n√£o encontrado!")
        sys.exit(1)

def create_launcher_script(project_dir, app_name):
    """Cria script de lan√ßamento para o execut√°vel"""
    launcher_path = project_dir / f"launch_{app_name.lower()}.sh"
    
    launcher_content = f'''#!/bin/bash
# Launcher para AudioAI Desktop

# Diret√≥rio do script
SCRIPT_DIR="$(cd "$(dirname "${{BASH_SOURCE[0]}}")" && pwd)"
APP_PATH="$SCRIPT_DIR/dist/{app_name}/{app_name}"

# Verificar se o execut√°vel existe
if [[ ! -f "$APP_PATH" ]]; then
    echo "‚ùå Execut√°vel n√£o encontrado: $APP_PATH"
    echo "üí° Execute primeiro: python build_executable.py"
    exit 1
fi

# Dar permiss√µes de execu√ß√£o
chmod +x "$APP_PATH"

# Executar aplica√ß√£o
echo "üöÄ Iniciando AudioAI Desktop..."
"$APP_PATH"
'''
    
    with open(launcher_path, 'w') as f:
        f.write(launcher_content)
    
    # Tornar o launcher execut√°vel
    os.chmod(launcher_path, 0o755)
    print(f"üöÄ Script de lan√ßamento criado: {launcher_path}")

if __name__ == "__main__":
    main()