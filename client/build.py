#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Build - Audio AI Client
Automatiza a gera√ß√£o do execut√°vel usando PyInstaller
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def print_step(message):
    """Imprime uma etapa do processo"""
    print(f"\nüîß {message}")
    print("=" * 50)

def run_command(command, description):
    """Executa um comando e trata erros"""
    print(f"Executando: {command}")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Sucesso")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro:")
        print(e.stderr)
        return False

def clean_build_dirs():
    """Limpa diret√≥rios de build anteriores"""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            try:
                print(f"Removendo {dir_name}/")
                shutil.rmtree(dir_name)
            except Exception as e:
                print(f"‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel remover {dir_name}: {e}")
    return True

def install_dependencies():
    """Instala depend√™ncias necess√°rias"""
    print_step("Instalando Depend√™ncias")
    
    # Verificar se est√° em um ambiente virtual
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è  Recomenda-se usar um ambiente virtual Python")
        response = input("Continuar mesmo assim? (y/N): ")
        if response.lower() != 'y':
            print("Build cancelado.")
            return False
    
    return run_command("pip install -r requirements.txt", "Instala√ß√£o de depend√™ncias")

def build_executable():
    """Gera o execut√°vel usando PyInstaller"""
    print_step("Gerando Execut√°vel")
    
    # Comando PyInstaller
    if os.path.exists('build.spec'):
        command = "pyinstaller build.spec"
        description = "Build usando arquivo .spec"
    else:
        # Fallback para comando direto
        command = (
            "pyinstaller --onefile --windowed "
            "--name AudioAI "
            "--hidden-import PySide6.QtCore "
            "--hidden-import PySide6.QtWidgets "
            "--hidden-import PySide6.QtGui "
            "--hidden-import sounddevice "
            "--hidden-import scipy "
            "--hidden-import numpy "
            "--hidden-import requests "
            "--hidden-import pydub "
            "main.py"
        )
        description = "Build usando comando direto"
    
    return run_command(command, description)

def show_results():
    """Mostra os resultados do build"""
    print_step("Resultados do Build")
    
    dist_dir = Path("dist")
    if dist_dir.exists():
        files = list(dist_dir.iterdir())
        if files:
            print("‚úÖ Execut√°vel gerado com sucesso!")
            print(f"üìÅ Localiza√ß√£o: {dist_dir.absolute()}")
            print("\nüìã Arquivos gerados:")
            for file in files:
                size = file.stat().st_size / (1024 * 1024)  # MB
                print(f"  ‚Ä¢ {file.name} ({size:.1f} MB)")
            
            # Instru√ß√µes de uso
            print("\nüöÄ Como usar:")
            print("1. Navegue at√© a pasta 'dist'")
            print("2. Execute o arquivo AudioAI (ou AudioAI.exe no Windows)")
            print("3. Certifique-se de que o servidor Node.js est√° rodando")
            
            return True
        else:
            print("‚ùå Nenhum arquivo encontrado na pasta dist")
            return False
    else:
        print("‚ùå Pasta dist n√£o foi criada")
        return False

def main():
    """Fun√ß√£o principal do script de build"""
    print("üéØ Audio AI Client - Script de Build")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('main.py'):
        print("‚ùå Erro: Execute este script no diret√≥rio client/")
        sys.exit(1)
    
    # Etapas do build
    steps = [
        ("Limpando diret√≥rios anteriores", clean_build_dirs),
        ("Instalando depend√™ncias", install_dependencies),
        ("Gerando execut√°vel", build_executable),
        ("Verificando resultados", show_results)
    ]
    
    for step_name, step_func in steps:
        print_step(step_name)
        if callable(step_func):
            if not step_func():
                print(f"‚ùå Falha na etapa: {step_name}")
                sys.exit(1)
        else:
            step_func()
    
    print("\nüéâ Build conclu√≠do com sucesso!")
    print("O execut√°vel est√° pronto para distribui√ß√£o.")

if __name__ == "__main__":
    main()