#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aplica√ß√£o Desktop - Audio AI Client
Aplica√ß√£o principal que integra grava√ß√£o de √°udio com IA via OpenAI
"""

import sys
from PySide6.QtWidgets import (QApplication, QWidget, QVBoxLayout, QPushButton, 
                               QTextEdit, QLabel, QComboBox, QSlider, QHBoxLayout)
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QFont, QClipboard
from recorder import AudioRecorder
from api_client import send_audio_to_server, set_server_url
from blackhole_installer import BlackHoleInstaller


class AudioProcessingThread(QThread):
    """Thread para processar o √°udio em background"""
    finished = Signal(str)
    error = Signal(str)
    
    def __init__(self, filename):
        super().__init__()
        self.filename = filename
    
    def run(self):
        try:
            print("üîÑ Iniciando processamento do √°udio...")
            response = send_audio_to_server(self.filename)
            print(f"üì• Resposta recebida: {response[:200]}...")  # Debug: primeiros 200 chars
            self.finished.emit(response)
        except Exception as e:
            print(f"‚ùå Erro no processamento: {str(e)}")
            self.error.emit(str(e))


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.recorder = None
        self.is_recording = False
        self.processing_thread = None
        self.init_ui()
        self.init_recorder()

    def init_recorder(self):
        """Inicializa o gravador com configura√ß√µes padr√£o"""
        try:
            self.recorder = AudioRecorder(record_mode="microphone", mix_ratio=0.7)
            self.status_label.setText("‚úÖ Gravador inicializado - Modo: Microfone")
        except Exception as e:
            self.status_label.setText(f"‚ùå Erro ao inicializar gravador: {e}")
            self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px;")

    def init_ui(self):
        """Inicializa a interface do usu√°rio"""
        self.setWindowTitle("üß† Audio AI Client - PySide6 + OpenAI")
        self.setGeometry(300, 300, 650, 600)
        
        # Layout principal
        layout = QVBoxLayout()
        
        # T√≠tulo
        title = QLabel("üéôÔ∏è Gravador de √Åudio com IA")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 16, QFont.Bold))
        layout.addWidget(title)
        
        # Configura√ß√µes de grava√ß√£o
        config_label = QLabel("‚öôÔ∏è Configura√ß√µes de Grava√ß√£o:")
        config_label.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(config_label)
        
        # Modo de grava√ß√£o
        mode_layout = QHBoxLayout()
        mode_label = QLabel("Modo:")
        mode_label.setMinimumWidth(80)
        self.mode_combo = QComboBox()
        self.mode_combo.addItems([
            "üé§ Apenas Microfone", 
            "üñ•Ô∏è Apenas Sistema", 
            "üé§üñ•Ô∏è Microfone + Sistema"
        ])
        self.mode_combo.currentTextChanged.connect(self.on_mode_changed)
        mode_layout.addWidget(mode_label)
        mode_layout.addWidget(self.mode_combo)
        layout.addLayout(mode_layout)
        
        # Slider de mixagem (s√≥ aparece no modo "both")
        self.mix_layout = QHBoxLayout()
        self.mix_label = QLabel("Mixagem:")
        self.mix_label.setMinimumWidth(80)
        self.mix_slider = QSlider(Qt.Horizontal)
        self.mix_slider.setMinimum(0)
        self.mix_slider.setMaximum(100)
        self.mix_slider.setValue(70)  # 70% sistema, 30% microfone
        self.mix_slider.valueChanged.connect(self.on_mix_changed)
        self.mix_value_label = QLabel("70% Sistema / 30% Microfone")
        self.mix_layout.addWidget(self.mix_label)
        self.mix_layout.addWidget(self.mix_slider)
        self.mix_layout.addWidget(self.mix_value_label)
        layout.addLayout(self.mix_layout)
        
        # Inicialmente esconder controles de mixagem
        self.mix_label.hide()
        self.mix_slider.hide()
        self.mix_value_label.hide()
        
        # Status
        self.status_label = QLabel("Inicializando gravador...")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666; font-size: 12px; margin: 10px;")
        layout.addWidget(self.status_label)
        
        # Bot√µes
        self.start_btn = QPushButton("üéôÔ∏è Iniciar Grava√ß√£o")
        self.start_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        
        self.stop_btn = QPushButton("‚èπÔ∏è Parar e Enviar")
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        self.stop_btn.setEnabled(False)
        
        layout.addWidget(self.start_btn)
        layout.addWidget(self.stop_btn)
        
        # √Årea de resposta
        response_label = QLabel("üìù Resposta da IA:")
        response_label.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(response_label)
        
        self.output = QTextEdit()
        self.output.setReadOnly(True)
        self.output.setPlaceholderText("A resposta da IA aparecer√° aqui ap√≥s o processamento do √°udio...")
        self.output.setStyleSheet("""
            QTextEdit {
                border: 2px solid #ddd;
                border-radius: 8px;
                padding: 10px;
                font-size: 12px;
                background-color: #f9f9f9;
                color: #2c3e50;
            }
        """)
        layout.addWidget(self.output)
        
        # Bot√£o de copiar
        self.copy_btn = QPushButton("üìã Copiar Resposta")
        self.copy_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px;
                font-size: 12px;
                border-radius: 5px;
                margin: 5px 0;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        self.copy_btn.setEnabled(False)  # Desabilitado inicialmente
        self.copy_btn.clicked.connect(self.copy_to_clipboard)
        layout.addWidget(self.copy_btn)
        
        self.setLayout(layout)
        
        # Conectar sinais
        self.start_btn.clicked.connect(self.start_recording)
        self.stop_btn.clicked.connect(self.stop_and_send)

    def on_mode_changed(self, mode_text):
        """Callback quando o modo de grava√ß√£o muda"""
        mode_map = {
            "üé§ Apenas Microfone": "microphone",
            "üñ•Ô∏è Apenas Sistema": "system", 
            "üé§üñ•Ô∏è Microfone + Sistema": "both"
        }
        
        selected_mode = mode_map.get(mode_text, "microphone")
        
        # Mostrar/esconder controles de mixagem
        if selected_mode == "both":
            self.mix_label.show()
            self.mix_slider.show()
            self.mix_value_label.show()
        else:
            self.mix_label.hide()
            self.mix_slider.hide()
            self.mix_value_label.hide()
        
        # Atualizar gravador se n√£o estiver gravando
        if not self.is_recording and self.recorder:
            try:
                mix_ratio = self.mix_slider.value() / 100.0
                self.recorder = AudioRecorder(record_mode=selected_mode, mix_ratio=mix_ratio)
                self.status_label.setText(f"‚úÖ Modo alterado para: {mode_text}")
                self.status_label.setStyleSheet("color: #4CAF50; font-size: 12px; margin: 10px;")
            except Exception as e:
                self.status_label.setText(f"‚ùå Erro ao alterar modo: {e}")
                self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px;")

    def on_mix_changed(self, value):
        """Callback quando a propor√ß√£o de mixagem muda"""
        system_percent = value
        mic_percent = 100 - value
        self.mix_value_label.setText(f"{system_percent}% Sistema / {mic_percent}% Microfone")
        
        # Atualizar gravador se n√£o estiver gravando
        if not self.is_recording and self.recorder:
            self.recorder.mix_ratio = value / 100.0

    def start_recording(self):
        """Inicia a grava√ß√£o de √°udio"""
        if not self.recorder:
            self.status_label.setText("‚ùå Gravador n√£o inicializado!")
            return
            
        try:
            mode_text = self.mode_combo.currentText()
            self.status_label.setText(f"üî¥ Gravando ({mode_text})... Fale agora!")
            self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px; font-weight: bold;")
            self.output.setText(f"Grava√ß√£o iniciada em modo: {mode_text}")
            
            self.recorder.start_recording()
            self.is_recording = True
            
            # Desabilitar controles durante grava√ß√£o
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.mode_combo.setEnabled(False)
            self.mix_slider.setEnabled(False)
            
        except Exception as e:
            self.output.setText(f"Erro ao iniciar grava√ß√£o: {str(e)}")
            self.status_label.setText("‚ùå Erro na grava√ß√£o")
            self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px;")

    def stop_and_send(self):
        """Para a grava√ß√£o e envia o √°udio para processamento"""
        try:
            self.status_label.setText("‚èπÔ∏è Parando grava√ß√£o...")
            self.status_label.setStyleSheet("color: #ff9800; font-size: 12px; margin: 10px;")
            
            filename = self.recorder.stop_recording()
            self.is_recording = False
            
            # Reabilitar controles
            self.mode_combo.setEnabled(True)
            self.mix_slider.setEnabled(True)
            
            if not filename:
                self.output.setText("‚ùå Erro: Nenhum arquivo de √°udio foi gerado!")
                self.reset_ui()
                return
            
            # Atualizar bot√µes
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(False)
            
            self.output.setText("üì§ Enviando √°udio ao servidor para processamento...")
            self.status_label.setText("üì§ Processando com IA...")
            
            # Processar em thread separada
            self.processing_thread = AudioProcessingThread(filename)
            self.processing_thread.finished.connect(self.on_processing_finished)
            self.processing_thread.error.connect(self.on_processing_error)
            self.processing_thread.start()
            
        except Exception as e:
            self.output.setText(f"Erro ao parar grava√ß√£o: {str(e)}")
            self.reset_ui()

    def on_processing_finished(self, response):
        """Callback quando o processamento termina com sucesso"""
        print(f"‚úÖ Exibindo resposta na interface: {response[:100]}...")  # Debug
        self.output.setText(response or "Sem resposta da IA.")
        self.status_label.setText("‚úÖ Processamento conclu√≠do!")
        self.status_label.setStyleSheet("color: #4CAF50; font-size: 12px; margin: 10px; font-weight: bold;")
        
        # Habilitar bot√£o de copiar se h√° conte√∫do
        if response and response.strip():
            self.copy_btn.setEnabled(True)
        
        self.reset_ui()

    def on_processing_error(self, error):
        """Callback quando ocorre erro no processamento"""
        self.output.setText(f"‚ùå Erro ao processar √°udio: {error}")
        self.status_label.setText("‚ùå Erro no processamento")
        self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px;")
        self.copy_btn.setEnabled(False)  # Desabilitar bot√£o em caso de erro
        self.reset_ui()

    def copy_to_clipboard(self):
        """Copia o conte√∫do da resposta para o clipboard"""
        try:
            text = self.output.toPlainText()
            if text.strip():
                clipboard = QApplication.clipboard()
                clipboard.setText(text)
                
                # Feedback visual tempor√°rio
                original_text = self.copy_btn.text()
                self.copy_btn.setText("‚úÖ Copiado!")
                self.copy_btn.setStyleSheet("""
                    QPushButton {
                        background-color: #27ae60;
                        color: white;
                        border: none;
                        padding: 10px;
                        font-size: 12px;
                        border-radius: 5px;
                        margin: 5px 0;
                    }
                """)
                
                # Restaurar ap√≥s 2 segundos
                QApplication.processEvents()
                import time
                time.sleep(0.5)  # Feedback r√°pido
                
                self.copy_btn.setText(original_text)
                self.copy_btn.setStyleSheet("""
                    QPushButton {
                        background-color: #3498db;
                        color: white;
                        border: none;
                        padding: 10px;
                        font-size: 12px;
                        border-radius: 5px;
                        margin: 5px 0;
                    }
                    QPushButton:hover {
                        background-color: #2980b9;
                    }
                    QPushButton:disabled {
                        background-color: #bdc3c7;
                        color: #7f8c8d;
                    }
                """)
            else:
                print("‚ö†Ô∏è Nenhum conte√∫do para copiar")
        except Exception as e:
            print(f"‚ùå Erro ao copiar: {str(e)}")

    def reset_ui(self):
        """Reseta a interface para o estado inicial"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.mode_combo.setEnabled(True)
        self.mix_slider.setEnabled(True)
        
        if not self.output.toPlainText().startswith("‚ùå") and not self.output.toPlainText().startswith("‚úÖ"):
            self.status_label.setText("Pronto para nova grava√ß√£o")
            self.status_label.setStyleSheet("color: #666; font-size: 12px; margin: 10px;")

    def closeEvent(self, event):
        """Cleanup ao fechar a aplica√ß√£o"""
        if self.is_recording:
            self.recorder.stop_recording()
        if self.processing_thread and self.processing_thread.isRunning():
            self.processing_thread.quit()
            self.processing_thread.wait()
        event.accept()


def main():
    """Fun√ß√£o principal"""
    app = QApplication(sys.argv)
    
    # Definir servidor via vari√°vel de ambiente ou argumento de linha de comando
    import os
    server_url = os.environ.get("AUDIOAI_SERVER_URL")
    for arg in sys.argv[1:]:
        if arg.startswith("--server-url="):
            server_url = arg.split("=", 1)[1]
            break
    if server_url:
        print(f"üåê Usando servidor: {server_url}")
        set_server_url(server_url)
    else:
        print("‚ÑπÔ∏è Usando servidor padr√£o: http://localhost:3030")
    
    # Verificar e instalar BlackHole se necess√°rio
    print("üîç Verificando instala√ß√£o do BlackHole...")
    blackhole_installer = BlackHoleInstaller()
    
    if not blackhole_installer.is_blackhole_installed():
        print("‚ö†Ô∏è BlackHole n√£o encontrado. Instala√ß√£o necess√°ria para captura de √°udio do sistema.")
        print("üöÄ Iniciando instala√ß√£o autom√°tica...")
        
        if not blackhole_installer.install_blackhole():
            print("‚ùå Falha na instala√ß√£o do BlackHole")
            print("‚ÑπÔ∏è A aplica√ß√£o continuar√° funcionando, mas apenas com √°udio do microfone.")
        else:
            print("‚úÖ BlackHole instalado com sucesso!")
    else:
        print("‚úÖ BlackHole j√° est√° instalado")
    
    # Configurar estilo da aplica√ß√£o
    app.setStyleSheet("""
        QWidget {
            background-color: #ffffff;
            font-family: 'Segoe UI', Arial, sans-serif;
            color: #2c3e50;
        }
    """)
    
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec())


if __name__ == "__main__":
    main()