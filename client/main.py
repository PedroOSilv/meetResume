#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aplica√ß√£o Desktop - Audio AI Client
Aplica√ß√£o principal que integra grava√ß√£o de √°udio com IA via OpenAI
"""

import sys
from PySide6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QTextEdit, QLabel
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QFont
from recorder import AudioRecorder
from api_client import send_audio_to_server


class AudioProcessingThread(QThread):
    """Thread para processar o √°udio em background"""
    finished = Signal(str)
    error = Signal(str)
    
    def __init__(self, filename):
        super().__init__()
        self.filename = filename
    
    def run(self):
        try:
            response = send_audio_to_server(self.filename)
            self.finished.emit(response)
        except Exception as e:
            self.error.emit(str(e))


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.recorder = AudioRecorder()
        self.is_recording = False
        self.processing_thread = None
        self.init_ui()

    def init_ui(self):
        """Inicializa a interface do usu√°rio"""
        self.setWindowTitle("üß† Audio AI Client - PySide6 + OpenAI")
        self.setGeometry(300, 300, 600, 500)
        
        # Layout principal
        layout = QVBoxLayout()
        
        # T√≠tulo
        title = QLabel("üéôÔ∏è Gravador de √Åudio com IA")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 16, QFont.Bold))
        layout.addWidget(title)
        
        # Status
        self.status_label = QLabel("Pronto para gravar")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666; font-size: 12px; margin: 10px;")
        layout.addWidget(self.status_label)
        
        # Bot√µes
        self.start_btn = QPushButton("üéôÔ∏è Iniciar Grava√ß√£o")
        self.start_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        
        self.stop_btn = QPushButton("‚èπÔ∏è Parar e Enviar")
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 15px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        self.stop_btn.setEnabled(False)
        
        layout.addWidget(self.start_btn)
        layout.addWidget(self.stop_btn)
        
        # √Årea de resposta
        response_label = QLabel("üìù Resposta da IA:")
        response_label.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(response_label)
        
        self.output = QTextEdit()
        self.output.setReadOnly(True)
        self.output.setPlaceholderText("A resposta da IA aparecer√° aqui ap√≥s o processamento do √°udio...")
        self.output.setStyleSheet("""
            QTextEdit {
                border: 2px solid #ddd;
                border-radius: 8px;
                padding: 10px;
                font-size: 12px;
                background-color: #f9f9f9;
                color: #2c3e50;
            }
        """)
        layout.addWidget(self.output)
        
        self.setLayout(layout)
        
        # Conectar sinais
        self.start_btn.clicked.connect(self.start_recording)
        self.stop_btn.clicked.connect(self.stop_and_send)

    def start_recording(self):
        """Inicia a grava√ß√£o de √°udio"""
        try:
            self.status_label.setText("üî¥ Gravando... Fale agora!")
            self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px; font-weight: bold;")
            self.output.setText("Grava√ß√£o iniciada... Fale agora!")
            
            self.recorder.start_recording()
            self.is_recording = True
            
            # Atualizar bot√µes
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            
        except Exception as e:
            self.output.setText(f"Erro ao iniciar grava√ß√£o: {str(e)}")
            self.status_label.setText("‚ùå Erro na grava√ß√£o")
            self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px;")

    def stop_and_send(self):
        """Para a grava√ß√£o e envia o √°udio para processamento"""
        try:
            self.status_label.setText("‚èπÔ∏è Parando grava√ß√£o...")
            self.status_label.setStyleSheet("color: #ff9800; font-size: 12px; margin: 10px;")
            
            filename = self.recorder.stop_recording()
            self.is_recording = False
            
            # Atualizar bot√µes
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(False)
            
            self.output.setText("üì§ Enviando √°udio ao servidor para processamento...")
            self.status_label.setText("üì§ Processando com IA...")
            
            # Processar em thread separada
            self.processing_thread = AudioProcessingThread(filename)
            self.processing_thread.finished.connect(self.on_processing_finished)
            self.processing_thread.error.connect(self.on_processing_error)
            self.processing_thread.start()
            
        except Exception as e:
            self.output.setText(f"Erro ao parar grava√ß√£o: {str(e)}")
            self.reset_ui()

    def on_processing_finished(self, response):
        """Callback quando o processamento termina com sucesso"""
        self.output.setText(response or "Sem resposta da IA.")
        self.status_label.setText("‚úÖ Processamento conclu√≠do!")
        self.status_label.setStyleSheet("color: #4CAF50; font-size: 12px; margin: 10px; font-weight: bold;")
        self.reset_ui()

    def on_processing_error(self, error):
        """Callback quando ocorre erro no processamento"""
        self.output.setText(f"‚ùå Erro ao processar √°udio: {error}")
        self.status_label.setText("‚ùå Erro no processamento")
        self.status_label.setStyleSheet("color: #f44336; font-size: 12px; margin: 10px;")
        self.reset_ui()

    def reset_ui(self):
        """Reseta a interface para o estado inicial"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        if not self.output.toPlainText().startswith("‚ùå") and not self.output.toPlainText().startswith("‚úÖ"):
            self.status_label.setText("Pronto para nova grava√ß√£o")
            self.status_label.setStyleSheet("color: #666; font-size: 12px; margin: 10px;")

    def closeEvent(self, event):
        """Cleanup ao fechar a aplica√ß√£o"""
        if self.is_recording:
            self.recorder.stop_recording()
        if self.processing_thread and self.processing_thread.isRunning():
            self.processing_thread.quit()
            self.processing_thread.wait()
        event.accept()


def main():
    """Fun√ß√£o principal"""
    app = QApplication(sys.argv)
    
    # Configurar estilo da aplica√ß√£o
    app.setStyleSheet("""
        QWidget {
            background-color: #ffffff;
            font-family: 'Segoe UI', Arial, sans-serif;
            color: #2c3e50;
        }
    """)
    
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec())


if __name__ == "__main__":
    main()