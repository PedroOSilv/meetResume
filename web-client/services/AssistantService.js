/**
 * AssistantService - Servi√ßo para comunica√ß√£o com assistente GPT
 * Respons√°vel por gerenciar polling e requisi√ß√µes ao assistente de obje√ß√µes
 */
class AssistantService {
    constructor(serverUrl, authHeaders) {
        this.serverUrl = serverUrl;
        this.authHeaders = authHeaders;
        this.pollingInterval = null;
        this.isPolling = false;
        this.onObjectionCallback = null;
        this.onErrorCallback = null;
        this.previousText = ''; // Armazena √∫ltima transcri√ß√£o analisada
        
        // Otimiza√ß√µes de requisi√ß√µes
        this.lastRequestTime = 0; // Timestamp da √∫ltima requisi√ß√£o
        this.minRequestInterval = 4000; // Cooldown de 4 segundos
        this.isRequesting = false; // Flag para prevenir requisi√ß√µes concorrentes
        this.processedContexts = new Set(); // Cache de contextos j√° processados
        this.cacheTimeout = 60000; // Cache expira ap√≥s 1 minuto
        this.cacheTimers = new Map(); // Timers para limpeza autom√°tica do cache
    }

    /**
     * Inicia o polling de obje√ß√µes a cada 5 segundos
     * @param {Function} onObjection - Callback chamado quando obje√ß√£o √© recebida
     * @param {Function} onError - Callback chamado em caso de erro
     * @param {Function} getTranscript - Callback para obter transcri√ß√£o recente
     */
    startPolling(onObjection, onError, getTranscript) {
        if (this.isPolling) {
            console.warn('‚ö†Ô∏è Polling j√° est√° ativo');
            return;
        }

        this.onObjectionCallback = onObjection;
        this.onErrorCallback = onError;
        this.getTranscriptCallback = getTranscript;
        this.isPolling = true;
        this.previousText = ''; // Resetar texto anterior ao iniciar
        
        // Resetar otimiza√ß√µes ao iniciar
        this.lastRequestTime = 0;
        this.isRequesting = false;
        this.processedContexts.clear();
        this.cacheTimers.forEach(timer => clearTimeout(timer));
        this.cacheTimers.clear();

        console.log('ü§ñ Iniciando polling de obje√ß√µes a cada 5 segundos');
        
        // Primeira requisi√ß√£o imediata
        this.requestObjection();

        // Configurar polling a cada 5 segundos
        this.pollingInterval = setInterval(() => {
            this.requestObjection();
        }, 1000);
    }

    /**
     * Para o polling de obje√ß√µes
     */
    stopPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
        }
        this.isPolling = false;
        this.previousText = ''; // Limpar texto anterior ao parar
        
        // Limpar cache e timers
        this.processedContexts.clear();
        this.cacheTimers.forEach(timer => clearTimeout(timer));
        this.cacheTimers.clear();
        
        console.log('ü§ñ Polling de obje√ß√µes parado');
    }

    /**
     * Gera hash simples para o contexto
     * @param {string} context - Contexto (√∫ltimas 15 palavras)
     * @returns {string} Hash do contexto
     */
    hashContext(context) {
        if (!context || !context.trim()) {
            return '';
        }
        
        // Normalizar contexto: remover espa√ßos extras e converter para min√∫sculas
        const normalized = context.trim().toLowerCase().replace(/\s+/g, ' ');
        
        // Criar hash simples (pode usar uma fun√ß√£o de hash simples)
        // Para simplicidade, vamos usar a string normalizada como hash
        // Em produ√ß√£o, poderia usar uma fun√ß√£o de hash como crypto.createHash
        return normalized;
    }

    /**
     * Adiciona hash ao cache com limpeza autom√°tica
     * @param {string} hash - Hash do contexto
     */
    addToCache(hash) {
        if (!hash) return;
        
        this.processedContexts.add(hash);
        
        // Limpar hash do cache ap√≥s timeout
        const timer = setTimeout(() => {
            this.processedContexts.delete(hash);
            this.cacheTimers.delete(hash);
        }, this.cacheTimeout);
        
        // Armazenar timer para poss√≠vel limpeza antecipada
        this.cacheTimers.set(hash, timer);
    }

    /**
     * Lista de interjei√ß√µes e sons a ignorar
     */
    getFilteredInterjections() {
        return ['uh', 'ah', 'ent√£o', 'aham', '√©', 'n√©', 'hmm', 'hum', 'eh', 'ah√£'];
    }

    /**
     * Filtra interjei√ß√µes de uma lista de palavras
     * @param {Array<string>} words - Array de palavras
     * @returns {Array<string>} Array de palavras v√°lidas (sem interjei√ß√µes)
     */
    filterInterjections(words) {
        const interjections = this.getFilteredInterjections();
        return words
            .map(word => word.toLowerCase().trim())
            .filter(word => {
                // Remover palavras vazias e interjei√ß√µes
                if (!word || word.length === 0) return false;
                return !interjections.includes(word);
            });
    }

    /**
     * Conta palavras novas v√°lidas comparando texto atual com texto anterior
     * @param {string} currentText - Texto atual completo
     * @param {string} previousText - Texto anterior completo
     * @returns {number} N√∫mero de palavras novas v√°lidas
     */
    countNewWords(currentText, previousText) {
        if (!currentText || !currentText.trim()) {
            return 0;
        }

        // Se n√£o h√° texto anterior, retornar todas as palavras v√°lidas
        if (!previousText || !previousText.trim()) {
            const words = currentText.trim().split(/\s+/);
            const validWords = this.filterInterjections(words);
            return validWords.length;
        }

        // Verificar se o texto atual cont√©m o texto anterior
        if (!currentText.startsWith(previousText)) {
            // Texto foi modificado de forma inesperada, considerar tudo como novo
            const words = currentText.trim().split(/\s+/);
            const validWords = this.filterInterjections(words);
            return validWords.length;
        }

        // Extrair apenas o texto novo
        const newText = currentText.substring(previousText.length).trim();
        
        if (!newText) {
            return 0;
        }

        // Dividir em palavras e filtrar interjei√ß√µes
        const newWords = newText.split(/\s+/);
        const validNewWords = this.filterInterjections(newWords);

        return validNewWords.length;
    }

    /**
     * Extrai as √∫ltimas N palavras da transcri√ß√£o
     * @param {string} text - Texto completo
     * @param {number} count - N√∫mero de palavras a extrair
     * @returns {string} √öltimas N palavras como string
     */
    getLastWords(text, count = 15) {
        if (!text || !text.trim()) {
            return '';
        }

        const words = text.trim().split(/\s+/);
        const lastWords = words.slice(-count);
        return lastWords.join(' ');
    }

    /**
     * Faz requisi√ß√£o para obter sugest√£o de obje√ß√£o
     * S√≥ envia quando houver 4 ou mais palavras novas na transcri√ß√£o
     * Implementa otimiza√ß√µes: cooldown, preven√ß√£o de concorr√™ncia e cache
     */
    async requestObjection() {
        // 1. Verificar se polling est√° ativo
        if (!this.isPolling) {
            return;
        }

        // 2. Verificar se j√° h√° requisi√ß√£o em andamento (prevenir concorr√™ncia)
        if (this.isRequesting) {
            console.log('‚è≥ Requisi√ß√£o j√° em andamento, aguardando...');
            return;
        }

        // 3. Obter transcri√ß√£o completa usando o callback
        const currentText = this.getTranscriptCallback ? this.getTranscriptCallback() : '';
        
        if (!currentText || !currentText.trim()) {
            console.log('‚ÑπÔ∏è Nenhuma transcri√ß√£o dispon√≠vel para an√°lise');
            return;
        }

        // 4. Contar palavras novas v√°lidas
        const newWordsCount = this.countNewWords(currentText, this.previousText);
        
        // 5. Se n√£o h√° 4 palavras novas, n√£o fazer requisi√ß√£o
        if (newWordsCount < 4) {
            console.log(`‚ÑπÔ∏è Apenas ${newWordsCount} palavra(s) nova(s). Aguardando mais conte√∫do...`);
            return;
        }

        // 6. Extrair √∫ltimas 15 palavras como contexto
        const context = this.getLastWords(currentText, 15);
        
        if (!context || !context.trim()) {
            console.log('‚ÑπÔ∏è Contexto vazio, n√£o √© poss√≠vel fazer requisi√ß√£o');
            return;
        }

        // 7. Gerar hash do contexto
        const contextHash = this.hashContext(context);
        
        // 8. Verificar se hash est√° no cache
        if (this.processedContexts.has(contextHash)) {
            console.log('‚ôªÔ∏è Contexto j√° foi analisado recentemente, pulando requisi√ß√£o');
            return;
        }

        // 9. Verificar cooldown (4 segundos)
        const timeSinceLastRequest = Date.now() - this.lastRequestTime;
        if (timeSinceLastRequest < this.minRequestInterval) {
            const remainingTime = Math.ceil((this.minRequestInterval - timeSinceLastRequest) / 1000);
            console.log(`‚è±Ô∏è Aguardando cooldown... (${remainingTime}s restantes)`);
            return;
        }

        // 10. Definir flag de requisi√ß√£o em andamento
        this.isRequesting = true;

        try {
            console.log(`ü§ñ Enviando transcri√ß√£o para assistente (${newWordsCount} palavras novas)...`);
            
            // Criar AbortController para timeout manual
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 70000);
            
            const response = await fetch(`${this.serverUrl}/api/assistant/objection`, {
                method: 'POST',
                headers: {
                    ...this.authHeaders,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    transcript: context
                }),
                signal: controller.signal
            });
            
            // Limpar timeout ap√≥s receber resposta
            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`Erro ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            // 12. Adicionar hash ao cache ap√≥s sucesso
            this.addToCache(contextHash);
            
            // Atualizar previousText apenas ap√≥s envio bem-sucedido
            this.previousText = currentText;
            
            // Atualizar timestamp da √∫ltima requisi√ß√£o
            this.lastRequestTime = Date.now();
            
            // Verificar se resposta √© "0" (sem obje√ß√£o) ou vazia
            if (result.objection && result.objection.trim() && result.objection !== '0') {
                console.log('‚úÖ Obje√ß√£o recebida do assistente');
                if (this.onObjectionCallback) {
                    this.onObjectionCallback(result.objection);
                }
            } else {
                console.log('‚ÑπÔ∏è Nenhuma obje√ß√£o relevante encontrada');
            }

        } catch (error) {
            // Tratar erros espec√≠ficos de forma diferente
            if (error.name === 'AbortError') {
                console.warn('‚è±Ô∏è Timeout na requisi√ß√£o de obje√ß√£o (assinante n√£o afetado)');
            } else if (error.message.includes('504')) {
                console.warn('‚è±Ô∏è Servidor ocupado, ignorando esta requisi√ß√£o (assinante n√£o afetado)');
            } else {
                console.error('‚ùå Erro ao buscar obje√ß√£o:', error.message);
            }
            
            if (this.onErrorCallback) {
                this.onErrorCallback(error);
            }
            // N√£o atualizar previousText em caso de erro
            // Mas ainda atualizar lastRequestTime para evitar spam de erros
            this.lastRequestTime = Date.now();
        } finally {
            // 13. Sempre garantir que a flag seja resetada
            this.isRequesting = false;
        }
    }

    /**
     * Verifica se o polling est√° ativo
     */
    isActive() {
        return this.isPolling;
    }
}

export default AssistantService;
